{"name":"Data manipulation with 'tidyr' and 'reshape2'","tagline":"A lesson in R for the SFU study group","body":"First install the packages if you haven't already done so:\r\n\r\n    if (!require(\"tidyr\")) install.packages(\"tidyr\")\r\n    if (!require(\"reshape2\")) install.packages(\"reshape2\")\r\n    if (!require(\"plyr\")) install.packages(\"plyr\")\r\n\r\n## Load the packages\r\n\r\n    library(\"tidyr\")\r\n    library(\"reshape2\")\r\n    library(\"plyr\")\r\n\r\n## Loading the data\r\nLoad the data, we're using the inflammation data from the [Software Carpentry novice R lessons](https://github.com/swcarpentry/r-novice-inflammation)\r\n\r\n    data <- read.csv(\"inflammation-01.csv\", header=FALSE)\r\n\r\nEach row in this data represents a patient and columns represent measurements of inflammation over time.\r\n\r\n    dim(data)\r\n\r\nLets put some more informative labels on this dataframe:\r\n\r\n    names(data) <- c(paste0(\"day_\", 1:40))\r\n    head(data)\r\n\r\nLets add patient IDs. Yes the method below is a bit more complicated than it needs to be for now, but the patientID's position will be important later\r\n\r\n    patientID <- c(1:60)\r\n    data <- cbind(patientID, data)\r\n    head(data)\r\n\r\nNow the dataframe is human-friendly, but what happens if we need to run an analysis with all the inflammation values in 1 column? (e.g. repeated measures ANOVA)\r\nAnother motivation is to have data that meets the basic tenants of well organized \"tidy\" data where:\r\n- each column is a variable\r\n- each row is an observation\r\n\r\nTo meet these criteria, our dataframe should have 3 columns (variables): patientID, day, and inflammation\r\nWe could use some \"brute-force\" coding to re-organize the data, but that's encouraging mistakes\r\nWith the reshape2 or tidyr packages, we have the tools to easily re-organize our data\r\n\r\n## reshape2::melt()\r\nFirst, lets try melt() from the reshape2 package:\r\n\r\n    reshaped_data <- melt(data)\r\n    head(reshaped_data)\r\n    tail(reshaped_data)\r\n\r\nThis is not quite what we needed, melt() took all the columns and treated them equally because we didn't tell it that patientID is an important id variable\r\nLets try that again but this time specify the id variables\r\n\r\n    reshaped_data <- melt(data, id.vars = \"patientID\")\r\n    head(reshaped_data)\r\n\r\nWhat if we had some other information about the patients that we think may be important?\r\nLet's assume that each patient was given 1 of 3 different drugs. Again, this is a bit more complicated than it needs to be for now, but the drug's position will be important later\r\n\r\n    drugs <- rep(c(\"A\", \"B\", \"C\"), each = 20)\r\n    data <- as.data.frame(append(data, list(drug = drugs), after = 1))\r\n    head(data)\r\n\r\nWe now need to specify both patientID and drug as id variables\r\n\r\n    reshaped_data <- melt(data, id.vars = c(\"patientID\", \"drug\"))\r\n    head(reshaped_data)\r\n    tail(reshaped_data)\r\n\r\nThe variables named patientID and drug are descriptive, but variable and value are not. We can fix that in melt() \r\n\r\n    reshaped_data <- melt(data, id.vars = c(\"patientID\", \"drug\"), variable.name = \"day\", value.name = \"inflammation\")\r\n\r\nYou can also manipulate data that is in 1 variable. In this data, we might want to seperate the numeric 'day' value from 'day_'. This would be particularly useful if the time units were not consistent (i.e. some as 'day_x' and some as 'week_x')\r\n\r\n    day_splits <- colsplit(reshaped_data$day, \"_\", c(\"unit_time\", \"time\"))\r\n    head(day_splits)\r\n\r\n## reshape2::dcast()\r\nNow if for some reason, you did not keep the original data (e.g. hard-drive failure?) and you need the data with the original formatting back (e.g. if your colleague will only work with it in that format), we can easily re-organize the data back to the original format\r\n\r\n    unreshaped_data <- dcast(reshaped_data, patientID+drug~day, value.var='inflammation')\r\n\r\nA brief note on the syntax here; the value variable that gets broken up is inflammation (the column with all the inflammation values). The new column names for the 'inflammation' values comes from the 'day' column (on the right side of the ~) and the id variables (patientID+drug) are on the right side of the '~' seperated by '+'\r\n\r\nLet's double-check that we didn't mess anything up along the way:\r\n\r\n    identical(data,unreshaped_data)\r\n\r\n## tidyr::gather()\r\nThe tidyr package does the same kinds of things albeit with different syntax. This is similar to melt(), it will reorganize your data in the 'long' format. Note that in this case, the ID variables (patientID and drug are left out)\r\n\r\ntidied_data <- gather(data, day, inflammation, day_1:day_40)\r\nhead(tidied_data)\r\nidentical(tidied_data, reshaped_data)\r\n\r\nGather also allows the alternative syntax of using the '-' symbol to identify which variables are not to be gathered (i.e. ID variables)\r\n\r\n    tidied_data <- gather(data, day, inflammation, -patientID, -drug)\r\n    head(tidied_data)\r\n    identical(tidied_data, reshaped_data)\r\n\r\n\r\n## tidyr::separate()\r\nSimilar to `colsplit()`, `separate()` will split a variable into multiple\r\n\r\n    day_splits <- separate(tidied_data, day, c(\"unit_time\",\"time\"), sep=\"_\")\r\n\r\n## tidyr::spread()\r\nThe tidyr package does the same kinds of things albeit with different syntax\r\n\r\n    untidied_data <- spread(tidied_data,day, inflammation)\r\n    head(untidied_data)\r\n    \r\n    identical(untidied_data, data)\r\n    identical(untidied_data, unreshaped_data)\r\n\r\n## Side by side comparison\r\nTidyr is designed specifically to tidy dataframes while reshape2 is a bit more for general reshaping\r\n\r\nThey seem to be roughly equally efficient computationally\r\n\r\n    data_big <- rbind.fill(replicate(10000, data, simplify = FALSE))\r\n    \r\n    system.time(melt(data_big, id.vars=c(\"patientID\",\"drug\"), variable.name=\"day\", value.name=\"inflammation\"))\r\n    system.time(gather(data_big, day, inflammation, day_1:day_40))\r\n\r\nReshape allows functions which is useful when id variables are not unique. Here we calculate the mean inflammation for each drug\r\n\r\n    means_drug <- dcast( reshaped_data, drug ~ day, value.var=\"inflammation\", fun.aggregate = mean)\r\n    head(means_drug)\r\n\r\nYou can also use dcast's sybling acast() to get an array instead of a dataframe\r\n\r\n    unreshaped_data_array <- acast(reshaped_data, patientID+drug~day, value.var='inflammation')\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}